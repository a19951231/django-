"""
Django settings for HttprunerMan project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$46f!bmpw230b%-4g@%in1_dpt@5$z)tfgi6fqg%h0-o$%4q+&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cms',
    'cms.cms_user',#用户信息模块
    'cms.entry_name',#项目名称模块
    'cms.module_name',#模块名称模块
    'cms.other_functions',#其他功能模块
    'rest_framework',#导入序列化模块
    'cms.url_configuration',#环境配置模块
    'cms.use_case',#用例模块
    'cms.request_mode',#请求方法模块
    'debug_toolbar',#在api上添加这个，
    'celery_tasks',
]

MIDDLEWARE = [
    'django.middleware.gzip.GZipMiddleware',#压缩前端页面显示的中间件
    'debug_toolbar.middleware.DebugToolbarMiddleware',#配置这个中间件，但这个中间件可以在压缩文件的中间件后面
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'cms.middewares.front_user_middleware',#添加中间件
]

ROOT_URLCONF = 'HttprunerMan.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,"front","templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            "builtins": [
                "django.templatetags.static"  # 这样如果我们想在模板使用static标签就可以直接拿来使用
            ]
        },
    },
]

WSGI_APPLICATION = 'HttprunerMan.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
         'ENGINE': 'django.db.backends.mysql',#ENGINE是输入数据库引擎，如果是mysql就输入MySQL
        'NAME': 'django_requests',#NAME是输入我们连接的数据库名称
        'USER':'root',#USER是输入我们登录数据库的账号
        'PASSWORD':'123456',#PASSWORD是输入我们数据库的密码
        'HOST':'127.0.0.1',#HOST是输入数据库主机的ip
        'PORT':'3306',#PORT是输入数据库的端口
        #我们在DATABASES里设置这些内容就可以使django连接我们的数据库
        'OPTIONS': {#如果运行的时候报Cannot add or update a child row:a foreign key constraint fails错误就添加这个
            "init_command": "SET foreign_key_checks = 0;",
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 缓存配置
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211'
    }
}
AUTH_USER_MODEL='cms_user.User'#指定模型

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/


STATIC_URL = '/static/'
STATICFILES_DIRS=[#这样就配置我们静态文件路径，这里先获取xfz这个目录路径，然后再进入front里，再进入dist路径找我们的存放的css或js静态文件
    os.path.join(BASE_DIR,"front","dist")
]

MEDIA_URL='/media/'#配置一下我们获取图片的地址
MEDIA_ROOT=os.path.join(BASE_DIR,"media")#配置我们上传图片储蓄的文件

# Django-Debug-Toolbar相关的配置
INTERNAL_IPS = ['127.0.0.1']#因为我们在本地开发，所以直接写127.0.0.1


#这里可以显示我们想要的功能，如果我们不需要直接备注它
DEBUG_TOOLBAR_PANELS = [
    # 代表是哪个django版本
    'debug_toolbar.panels.versions.VersionsPanel',
    # 用来计时的，判断加载当前页面总共花的时间
    'debug_toolbar.panels.timer.TimerPanel',
    # 读取django中的配置信息
    #'debug_toolbar.panels.settings.SettingsPanel',
    # 看到当前请求头和响应头信息
    #'debug_toolbar.panels.headers.HeadersPanel',
    # 当前请求的想信息（视图函数，Cookie信息，Session信息等）
    #'debug_toolbar.panels.request.RequestPanel',
    # 查看SQL语句
    'debug_toolbar.panels.sql.SQLPanel',
    # 静态文件
    #'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    # 模板文件
    #'debug_toolbar.panels.templates.TemplatesPanel',
    # 缓存
    #'debug_toolbar.panels.cache.CachePanel',
    # 信号
    #'debug_toolbar.panels.signals.SignalsPanel',
    # 日志
    #'debug_toolbar.panels.logging.LoggingPanel',
    # 重定向
    #'debug_toolbar.panels.redirects.RedirectsPanel',
]

#6.然后我们在setting里配置下面的操作，把JQUERY_URL设置为空，这样我们页面加载这个工具的时候不需要加载国外的jq文件，直接加载我们页面的jq文件，这样就不需要加载慢，如果我们没有jq文件，我们可以百度找一个jq文件的url放到JQUERY_URL里就可以
DEBUG_TOOLBAR_CONFIG = {
    'JQUERY_URL': 'https://code.jquery.com/jquery-3.4.0.min.js'
}

#celery设置
IS_USE_CELERY = True
BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Nairobi'

